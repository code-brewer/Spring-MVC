7.1 Tomcat的顶层结构及启动过程
7.1.1 Tomcat的顶层结构
    Tomcat中最顶层的容器叫Server，代表整个服务器，Server中包含至少一个Service，用于提供具体的服务。
    Service主要包含两部分：Connector和Container.
    Connector用于处理连接相关的事情，并提供Socket与request,response的转换。
    Container用于封装和管理Servlet,以及具体处理request请求。
    一个Tomcat中只有一个Server，一个Server可以包含多个Service，一个Service只有一个Container，但是可以有多个Connector（因为一个服务可以有多个
    连接，如同时提供http和https连接，也可以提供相同协议不同端口的连接）
    
    Tomcat里的Server由org.apache.catalina.startup.Catalina来管理，Catalina是整个Tomcat的管理类，它里面的三个方法load、start、stop分别用来
    管理整个服务器的生命周期，load方法用来根据conf/server.xml文件创建Server并调用Server的init方法进行初始化，start方法用于启动服务器，stop方
    法用于停止服务器。
    start和stop方法在内部分别调用了Server的start和stop方法，load方法内部调用Server的init方法，这三个方法都会按容器的结构逐层调用相应的方法，
    比如，Server的start方法中会调用所有的Service中的start方法，Service中的start方法又会调用所有包含的Connector和Container的start方法，这样
    整个服务器就启动了，init和stop方法也一样，这就是Tomcat生命周期的管理方式。
    Catalina还有一个方法也很重要，那就是await方法，Catalina中的await方法直接调用了Server的await方法，这个方法的作用是进入一个循环，让主线程
    不会退出。
    不过Tomcat的入口main方法并不在Catalina类中，而是在org.apache.catalina.startup.Bootstrap中。Bootstrap的作用类似一个CatalinaAdaptor，
    具体处理过程还是使用Catalina来完成，这么做的好处是可以把启动的入口和具体的管理类分开，从而可以很方便的创建多种启动方式，每种启动方式只需要
    写一个相应的CatalinaAdaptor就可以了。
    
7.1.2 Bootstrap的启动过程
    Bootstrap是Tomcat的入口，正常情况下启动Tomcat就是调用Bootstrap的main方法，其代码如下：
    /**
     * Main method and entry point when starting Tomcat via the provided scripts.
     * @param args Command line arguments to be processed
     */
    public static void main(String args[]) {
        //daemon为成员变量，private static Bootstrap daemon = null;
        if (daemon == null) {
            // Don't set daemon until init() has completed
            Bootstrap bootstrap = new Bootstrap();
            try {
                //初始化了ClassLoader，并用ClassLoader创建了Catalina实例，赋给catalinaDaemon变量
                //后面对命令的操作都要使用catalinaDaemon来具体执行
                bootstrap.init();
            } catch (Throwable t) {
                handleThrowable(t);
                t.printStackTrace();
                return;
            }
            daemon = bootstrap;
        } else {
            // When running as a service the call to stop will be on a new
            // thread so make sure the correct class loader is used to prevent
            // a range of class not found exceptions.
            Thread.currentThread().setContextClassLoader(daemon.catalinaLoader);
        }

        try {
            //如果main方法的参数为空，默认执行start
            String command = "start";
            if (args.length > 0) {
                command = args[args.length - 1];
            }
            if (command.equals("startd")) {
                args[args.length - 1] = "start";
                daemon.load(args);
                daemon.start();
            } else if (command.equals("stopd")) {
                args[args.length - 1] = "stop";
                daemon.stop();
            } else if (command.equals("start")) {
                daemon.setAwait(true);
                daemon.load(args);
                daemon.start();
            } else if (command.equals("stop")) {
                daemon.stopServer(args);
            } else if (command.equals("configtest")) {
                daemon.load(args);
                if (null==daemon.getServer()) {
                    System.exit(1);
                }
                System.exit(0);
            } else {
                log.warn("Bootstrap: command \"" + command + "\" does not exist.");
            }
        } catch (Throwable t) {
            // Unwrap the Exception for clearer error reporting
            if (t instanceof InvocationTargetException &&
                    t.getCause() != null) {
                t = t.getCause();
            }
            handleThrowable(t);
            t.printStackTrace();
            System.exit(1);
        }
    }
    对start命令的处理调用了三个方法：setAwait(true)、load(args)和start()。这三个方法内部都调用了Catalina的相应方法进行具体执行，只不过是用
    反射来调用。start方法的代码如下：
    /**
     * Start the Catalina daemon.
     */
    public void start()
        throws Exception {
        //首先判断catalinaDaemon有没有被初始化，如果没有则调用init方法对其进行初始化。
        if( catalinaDaemon==null ) init();
        //使用Method进行反射调用Catalina的start方法。
        Method method = catalinaDaemon.getClass().getMethod("start", (Class [] )null);
        method.invoke(catalinaDaemon, (Object [])null);
    }
    Method是java.lang.reflect包里的类，代表一个具体的方法，可以使用其中的invoke方法来执行所代表的方法，invoke方法有两个参数，第一个参数是
    Method方法所在的实体，第二个参数是可变参数用于Method方法执行时所需要的参数，所以上面的调用相当于((Catalina)catalinaDaemon).start()。
    setAwait和load也用类似的方法调用了Catalina中的setAwait和load方法。
    
7.1.3 Catalina的启动过程
    从上面的内容可以知道，Catalina的启动主要是调用setAwait、load和start方法来完成的。
    setAwait方法用于设置Server启动完成后是否进入等待状态的标志，如果为true则进入，否则不进入。
    load方法用于加载配置文件，创建并初始化Server。
    start方法用于启动服务器。
    
    首先来看看setAwait方法，代码如下：
    //org.apache.catalina.startup.Catalina
    //protected boolean await = false;
     public void setAwait(boolean b) {
        await = b;
    }
    
    Catalina的load方法根据config/server.xml创建了Server对象，并赋值给server属性，然后调用了server的init方法，代码如下：
    //org.apache.catalina.startup.Catalina
    public void load(){
        long t1 = System.nanoTime();
        
        ....    //省略了创建server的代码，创建过程使用Digester完成
        
        // Start the new server
        try {
            getServer().init();
        } catch (LifecycleException e) {
            if (Boolean.getBoolean("org.apache.catalina.startup.EXIT_ON_INIT_FAILURE")) {
                throw new java.lang.Error(e);
            } else {
                log.error("Catalina.start", e);
            }

        }

        long t2 = System.nanoTime();
        if(log.isInfoEnabled()) {
            //启动过程中，控制台中可以看到
            log.info("Initialization processed in " + ((t2 - t1) / 1000000) + " ms");
        }
    }
    
    Catalina的start方法主要调用了server的start方法启动服务器，并根据await属性判断是否让程序进入等待状态，代码如下：
    //org.apache.catalina.startup.Catalina
    public void start(){
        //首先判断Server是否存在，如果不存在则调用load来初始化Server
        if (getServer() == null) {
            load();
        }
        //如果调用load之后Server还不存在，启动失败。
        if (getServer() == null) {
            log.fatal("Cannot start server. Server instance is not configured.");
            return;
        }

        long t1 = System.nanoTime();
        // Start the new server
        try {
            //启动Server服务器
            getServer().start();
        } catch (LifecycleException e) {
            log.fatal(sm.getString("catalina.serverStartFail"), e);
            try {
                getServer().destroy();
            } catch (LifecycleException e1) {
                log.debug("destroy() failed for failed Server ", e1);
            }
            return;
        }

        long t2 = System.nanoTime();
        if(log.isInfoEnabled()) {
            log.info("Server startup in " + ((t2 - t1) / 1000000) + " ms");
        }
        
        ... //省略注册关闭钩子代码
        
        if (await) {
            //await方法里面调用了Server的await方法，Server的await方法内部会执行一个while循环，这样程序就停到了await方法。
            await();
            //当await方法里面的while循环退出时，就执行该stop方法，从而关闭服务器。
            stop();
        }
    }
    
7.1.4 Server的启动过程
    
